parsers: # array
  - reg: ^((https|http)?:\/\/)[^\s]+
    code: |
      let protype = {
        port: 7890,
        "socks-port": 7891,
        "mixed-port": 7890,
        "allow-lan": false,
        "bind-address": '*',
        mode: "Rule",
        "log-level": "info",
        ipv6: true,
        "external-controller": "127.0.0.1:9090",
        dns: {
            enable: false,
            listen: "0.0.0.0:53",
            ipv6: false,
            "default-nameserver": ["114.114.114.114", "223.5.5.5"],
            "enhanced-mode": "fake-ip",
            "fake-ip-range": "198.18.0.1/16",
            nameserver: ["114.114.114.114", "223.5.5.5"],
            fallback: ["8.8.8.8", "1.1.1.1"],
            "fallback-filter": {
              geoip: true,
              ipcidr: ["240.0.0.0/4", "0.0.0.0/32"]
            },
        },
        proxies: [],
        "proxy-groups": [
            { name: "节点选择", type: "select", proxies: ["自动选择", "故障转移", "负载均衡", "DIRECT"] },
            { name: "哔哩哔哩", type: "select", proxies: ["DIRECT", "节点选择"] },
            { name: "动画疯", type: "select", proxies: ["节点选择"] },
            { name: "Steam", type: "select", proxies: ["DIRECT", "节点选择"] },
            { name: "Google", type: "select", proxies: ["节点选择"] },
            { name: "Youtube", type: "select", proxies: ["节点选择"] },
            { name: "Telegram", type: "select", proxies: ["节点选择"] },
            { name: "Apple", type: "select", proxies: ["DIRECT", "节点选择"] },
            { name: "Microsoft", type: "select", proxies: ["DIRECT", "节点选择"] },
            { name: "国内直连", type: "select", proxies: ["DIRECT", "节点选择"] },
            { name: "漏网之鱼", type: "select", proxies: ["节点选择", "DIRECT"] },
            { name: "广告过滤", type: "select", proxies: ["REJECT", "节点选择", "DIRECT"] },
            { name: "手动控制", type: "select", proxies: ["DIRECT", "节点选择", "REJECT"] },
            { name: "自动选择", type: "url-test", url: "http://www.gstatic.com/generate_204", interval: 300 },
            { name: "故障转移", type: "fallback", url: "http://www.gstatic.com/generate_204", interval: 300 },
            { name: "负载均衡", type: "load-balance", url: "http://www.gstatic.com/generate_204", interval: 300 }
        ],
        "rule-providers": {
            reject: {
              type: "http",
              behavior: "domain",
              url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/reject.txt",
              path: "./ruleset/reject.yaml",
              interval: 86400
            },
            apple: {
              type: "http",
              behavior: "classical",
              url: "https://cdn.jsdelivr.net/gh/Semporia/Clash@master/Rule/Apple.yaml",
              path: "./ruleset/apple.yaml",
              interval: 86400
            },
            proxy: {
              type: "http",
              behavior: "domain",
              url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/proxy.txt",
              path: "./ruleset/proxy.yaml",
              interval: 86400
            },
            direct: {
              type: "http",
              behavior: "domain",
              url: "https://cdn.jsdelivr.net/gh/Semporia/Clash@master/Rule/China.yaml",
              path: "./ruleset/direct.yaml",
              interval: 86400
            },
            private: {
              type: "http",
              behavior: "domain",
              url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/private.txt",
              path: "./ruleset/private.yaml",
              interval: 86400
            },
            google: {
              type: "http",
              behavior: "classical",
              url: "https://cdn.jsdelivr.net/gh/Semporia/Clash@master/Rule/Google.yaml",
              path: "./ruleset/google.yaml",
              interval: 86400
            },
            microsoft: {
              type: "http",
              behavior: "classical",
              url: "https://cdn.jsdelivr.net/gh/Semporia/Clash@master/Rule/Microsoft.yaml",
              path: "./ruleset/microsoft.yaml",
              interval: 86400
            },
            steam: {
              type: "http",
              behavior: "classical",
              url: "https://cdn.jsdelivr.net/gh/Semporia/Clash@master/Rule/Steam.yaml",
              path: "./ruleset/steam.yaml",
              interval: 86400
            },
            telegram: {
              type: "http",
              behavior: "classical",
              url: "https://cdn.jsdelivr.net/gh/Semporia/Clash@master/Rule/Telegram.yaml",
              path: "./ruleset/telegram.yaml",
              interval: 86400
            },
            youtube: {
              type: "http",
              behavior: "classical",
              url: "https://cdn.jsdelivr.net/gh/Semporia/Clash@master/Rule/YouTube.yaml",
              path: "./ruleset/youtube.yaml",
              interval: 86400
            },
            applications: {
              type: "http",
              behavior: "classical",
              url: "https://cdn.jsdelivr.net/gh/Loyalsoldier/clash-rules@release/applications.txt",
              path: "./ruleset/applications.yaml",
              interval: 86400
            },
            custom: {
              type: "http",
              behavior: "classical",
              url: "https://cdn.jsdelivr.net/gh/kafuumi/clash_rules@latest/ruleset/custom.yaml",
              path: "./ruleset/custom.yaml",
              interval: 86400
            },
            donghuafeng: {
              type: "http",
              behavior: "domain",
              url: "https://cdn.jsdelivr.net/gh/kafuumi/clash_rules@latest/ruleset/donghuafeng.yaml",
              path: "./ruleset/donghuafeng.yaml",
              interval: 86400
            },
            bilibili: {
              type: "http",
              behavior: "classical",
              url: "https://cdn.jsdelivr.net/gh/kafuumi/clash_rules@latest/ruleset/bilibili.yaml",
              path: "./ruleset/bilibili.yaml",
              interval: 86400
            },
            direct_addition: {
              type: "http",
              behavior: "classical",
              url: "https://cdn.jsdelivr.net/gh/kafuumi/clash_rules@latest/ruleset/direct.yaml",
              path: "./ruleset/direct.yaml",
              interval: 86400
            }
        },
        rules: [
            "DOMAIN,clash.razord.top,DIRECT",
            "DOMAIN,yacd.haishan.me, DIRECT",
            "RULE-SET,custom,手动控制",
            "RULE-SET,direct_addition,国内直连",
            "RULE-SET,applications,DIRECT",
            "RULE-SET,private,DIRECT",
            "RULE-SET,reject,广告过滤",
            "RULE-SET,apple,Apple",
            "RULE-SET,bilibili,哔哩哔哩",
            "RULE-SET,donghuafeng,动画疯",
            "RULE-SET,google,Google",
            "RULE-SET,microsoft,Microsoft",
            "RULE-SET,telegram,Telegram",
            "RULE-SET,steam,Steam",
            "RULE-SET,youtube,Youtube",
            "RULE-SET,proxy,节点选择",
            "RULE-SET,direct,国内直连",
            "GEOIP,CN,国内直连",
            "MATCH,漏网之鱼"
        ]
      }

      module.exports.parse = async (raw, { axios, yaml, notify, console }, { name, url, interval, selected }) => {
        const obj = yaml.parse(raw)
        let proxies = []
        let tw = []
        let hk = []

        let regHK = /HK|香港|Hong Kong/i
        let regTW = /TW|台湾/i
        for (let i = 0; i < obj.proxies.length; i++) {
            let p = obj.proxies[i]
            let pn = p.name

            protype.proxies.push(p)
            proxies.push(pn)
            //根据名称分类
            if (pn.match(regHK)) {
              hk.push(pn)
            } else if (pn.match(regTW)) {
              tw.push(pn)
            }
        }

        for (let i = 0; i < protype['proxy-groups'].length; i++) {
            let pg = protype['proxy-groups'][i]
            let name = pg.name
            if (name == "国内直连" || name == "漏网之鱼" || name == "广告过滤" || name == "手动控制") {
              continue
            }
            if (pg.proxies == undefined) {
              pg.proxies = []
            }
            if ((name == "哔哩哔哩" || name == "动画疯") && (hk.length != 0 || tw.length != 0)) {
              pg.proxies = pg.proxies.concat(hk, tw)
              continue
            }
            pg.proxies = pg.proxies.concat(proxies)
        }
        return yaml.stringify(protype)
      }
